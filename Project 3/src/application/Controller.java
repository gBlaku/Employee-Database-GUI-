package application;

import javafx.fxml.FXML; 
import javafx.scene.control.Button;
import javafx.scene.layout.HBox;
//import view.Stage;
//import view.Alert;
import javafx.scene.control.TextField;
import javafx.event.ActionEvent;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.RadioButton;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;


public class Controller {
	private static final int MAX_PARTTIME_HOURS = 100;
	Company company;
	public Controller() {
		company = new Company();
	}
	
	
	
	
	
	
	
	
	@FXML
	private Label nameLabel;
	@FXML
	private HBox roleBox;
	@FXML
	private RadioButton partTimeButton;
	@FXML
	private RadioButton fullTimeButton;
	@FXML
	private RadioButton managementButton;
	@FXML
	private HBox departmentBox;
	@FXML
	private RadioButton itButton;
	@FXML
	private RadioButton csButton;
	@FXML
	private RadioButton eceButton;
	@FXML
	private RadioButton directorButton;
	@FXML
	private RadioButton depHeadButton;
	@FXML
	private RadioButton managerButton;
	@FXML
	private DatePicker dateHired;
	@FXML
	private TextField employeeSalary;
	@FXML
	private TextField employeeName;
	@FXML
	private TextField hoursWorked;
	@FXML
	private TextField hourlyRate;
	@FXML
	private Button addEmployeeButton;
	@FXML
	private Button removeEmployeeButton;
	@FXML
	private Button setHoursButton;
	@FXML
	private TextArea outputArea;
	@FXML
	private Button clearButton;

	// Event Listener on Button[#setHoursButton].onAction

	
	@FXML
	private void onMouseClick(ActionEvent event)  {
		// TODO Autogenerated
		if (partTimeButton.isSelected()) {
			addParttime();
		}
		else if (fullTimeButton.isSelected()) {
			addFulltime();
		}
		
		else if (managementButton.isSelected()) {
			addManagement();
		}
		
	}
	
	
	
	@FXML
	private void pickedParttime() {
		if (partTimeButton.isSelected()) {
			employeeSalary.setDisable(true);
			directorButton.setDisable(true);
			depHeadButton.setDisable(true);
			managerButton.setDisable(true);
			
			hoursWorked.setDisable(false);
			hourlyRate.setDisable(false);
			setHoursButton.setDisable(false);
		}
	}
	
	@FXML
	private void pickedFulltime() {
		if (fullTimeButton.isSelected()) {
			employeeSalary.setDisable(false);
			
			directorButton.setDisable(true);
			depHeadButton.setDisable(true);
			managerButton.setDisable(true);
			hoursWorked.setDisable(true);
			hourlyRate.setDisable(true);
			setHoursButton.setDisable(true);
		}
	}
	
	
	@FXML
	private void pickedManagement() {
		if (managementButton.isSelected()) {
			employeeSalary.setDisable(false);
			directorButton.setDisable(false);
			depHeadButton.setDisable(false);
			managerButton.setDisable(false);
			
			
			hoursWorked.setDisable(true);
			hourlyRate.setDisable(true);
			setHoursButton.setDisable(true);
		}
	}
	
	
	
	@FXML
	private void setHours(ActionEvent event)  {
		// TODO Autogenerated
		if (!partTimeButton.isSelected()) {
			outputArea.appendText("You can only set hours for a part-time employee.\n");
			return;
		}
		
		
		String department ="";
		if (itButton.isSelected()) {
			department = "IT";
		}
		else if (csButton.isSelected()) {
			department = "CS";
		}
		else if (eceButton.isSelected()) {
			department = "ECE";
		}
		else {
			outputArea.appendText("Please pick a department.\n");
		}
		
	
		
		if (listCheck() == true) {
			return;
		}
		
		
		if (hoursWorked.getText().isEmpty() ) {
			outputArea.appendText("Please enter hours worked.\n");
			return;
		}
		
		try {
			if (Integer.parseInt(hoursWorked.getText()) > MAX_PARTTIME_HOURS) {
				outputArea.appendText("Invalid Hours: over 100.\n");
				return;
			}
		
			if (Integer.parseInt(hoursWorked.getText()) < 0) {
				outputArea.appendText("Working hours cannot be negative.\n");
				return;
			}
		}
		catch(NumberFormatException e) {
			outputArea.appendText("Enter a number for hours worked.\n");
			return;
		}
		
		
		Parttime temp = new Parttime(new Profile(employeeName.getText(), department, new Date(dateHired.getValue().toString())), 0);
		temp.setHours(Integer.parseInt(hoursWorked.getText()));
		if (!company.setHours(temp)) {
			outputArea.appendText("Employee does not exist.\n");
			return;
		}
		outputArea.appendText("Working hours set.\n");
		
	}
	
	
	@FXML
	private void remove(ActionEvent event) {
		String department ="";
		if (itButton.isSelected()) {
			department = "IT";
		}
		else if (csButton.isSelected()) {
			department = "CS";
		}
		else if (eceButton.isSelected()) {
			department = "ECE";
		}
		else {
			outputArea.appendText("Please pick a department.\n");
		}
		
		
		if (listCheck() == true) {
			return;
		}
		
		
		if (company.remove(new Employee(new Profile(employeeName.getText(), department, new Date(dateHired.getValue().toString()))))) {
			outputArea.appendText("Employee removed.\n");
		}
	
		else {
			outputArea.appendText("Employee does not exist.\n");
			return;
		}
		
	}
	
	
	@FXML
	private void addParttime() {
		String department ="";
		if (itButton.isSelected()) {
			department = "IT";
		}
		else if (csButton.isSelected()) {
			department = "CS";
		}
		else if (eceButton.isSelected()) {
			department = "ECE";
		}
		else {
			outputArea.appendText("Please pick a department.\n");
			return;
		}
		
		if (hourlyRate.getText().isEmpty() ) {
			outputArea.appendText("Parttime employees must have an hourly pay rate.\n");
			return;
		}
		
		try {
			if (Double.parseDouble(hourlyRate.getText()) < 0) {
				outputArea.appendText("Hourly rate cannot be negative.\n");
				return;
			}
		}
		catch(NumberFormatException e) {
			outputArea.appendText("Enter a number for hourly rate.\n");
			return;
		}
		
		
		
		if (dateHired.getValue() == null) {
			outputArea.appendText("Please enter a date.\n");
			return;
		}
		Parttime newEmployee = new Parttime(new Profile(employeeName.getText(), department, new Date(dateHired.getValue().toString())), Double.parseDouble(hourlyRate.getText() ));
		
		boolean isSuccess = checkEmployee(newEmployee);
		
		
	}
	@FXML
	private void addFulltime() {
		String department ="";
		if (itButton.isSelected()) {
			department = "IT";
		}
		else if (csButton.isSelected()) {
			department = "CS";
		}
		else if (eceButton.isSelected()) {
			department = "ECE";
		}
		else {
			outputArea.appendText("Please pick a department.\n");
			return;
		}
		
		if (employeeSalary.getText().isEmpty() ) {
			outputArea.appendText("Fulltime/Management employees must have a salary.\n");
			return;
		}
		try {
			if (Double.parseDouble(employeeSalary.getText()) < 0) {
				outputArea.appendText("Salary cannot be negative.\n");
				return;
			}
		}
		catch(NumberFormatException e){
			outputArea.appendText("Enter a number for the salary.\n");
			return;
		}
		
		if (dateHired.getValue() == null) {
			outputArea.appendText("Please enter a date.\n");
			return;
		}
		Fulltime newEmployee = new Fulltime(new Profile(employeeName.getText(), department, new Date(dateHired.getValue().toString())), Double.parseDouble(employeeSalary.getText() ));
		
		
		
		
		
		boolean isSuccess = checkEmployee(newEmployee);
		
		
	}
	
	@FXML
	private void addManagement() {
		String department ="";
		int managementRole =0;
		
		if (itButton.isSelected()) {
			department = "IT";
		}
		else if (csButton.isSelected()) {
			department = "CS";
		}
		else if (eceButton.isSelected()) {
			department = "ECE";
		}
		else {
			outputArea.appendText("Please pick a department.\n");
			return;
		}
		
		
		if (directorButton.isSelected()) {
			managementRole = 3;
		}
		else if (depHeadButton.isSelected()) {
			managementRole = 2;
		}
		else if (managerButton.isSelected()) {
			managementRole = 1;
		}
		else {
			outputArea.appendText("Please pick a management role for this management employee.\n");
			return;
		}
		
		if (employeeSalary.getText().isEmpty() ) {
			outputArea.appendText("Fulltime/Management employees must have a salary.\n");
			return;
		}
		
		try {
			if (Double.parseDouble(employeeSalary.getText()) < 0) {
				outputArea.appendText("Salary cannot be negative.\n");
				return;
			}
		}
		catch(NumberFormatException e){
			outputArea.appendText("Enter a number for the salary.\n");
			return;
		}
		
		if (dateHired.getValue() == null) {
			outputArea.appendText("Please enter a date.\n");
			return;
		}
		
		Management newEmployee = new Management(new Profile(employeeName.getText(), department, new Date(dateHired.getValue().toString())), Double.parseDouble(employeeSalary.getText()), managementRole );
		
		boolean isSuccess = checkEmployee(newEmployee);
		
		
	}
	
	
	
	
	
	
	
	@FXML
	private boolean checkEmployee(Employee newEmployee) {
		if (employeeName.getText().isEmpty()) {
			outputArea.appendText("Please enter a name for the employee!\n");
			return false;
		}
		
		
		
		
		Date newDate = (newEmployee.getDate());
		outputArea.appendText(newDate.toString() + "\n");
		
		if (!newDate.isValid()) {
			outputArea.appendText("Please enter a valid date.\n");
			return false;
		}
			
		
		
		
		if(company.add(newEmployee) != true) {
			outputArea.appendText("Employee is already in the list.\n");
			return false;
		}
		else {
			outputArea.appendText("Employee added.\n");
		}
		
		return true;
	}
	
	
	@FXML
	private boolean listCheck() {
		if (company.isEmpty()) {
			outputArea.appendText("Employee database is empty.\n");
			return true;
		}
		return false;
	}
	
	
	
	@FXML
	private void computePayments() {
		if (listCheck() == false) {
			company.processPayments();
			outputArea.appendText("Payments calculated.\n");
		}
		
	}
		
	
	
	
	
	
	@FXML
	private void print() {
		if (listCheck() == false) {
			outputArea.appendText("--Printing earning statements for all employees--\n");
			company.print(outputArea);
		}
	}
	
	@FXML
	private void printByDep() {
		if (listCheck() == false) {
			outputArea.appendText("--Printing earning statements by department--\n");
			company.printByDepartment(outputArea);
		}
	}
	
	@FXML
	private void printByDateHired() {
		if (listCheck() == false) {
			outputArea.appendText("--Printing earning statements by date hired--\n");
			company.printByDate(outputArea);
		}
	}
}
